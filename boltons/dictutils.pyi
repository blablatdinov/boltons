from _typeshed import Incomplete
from collections.abc import Generator

class OrderedMultiDict(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, k, v) -> None: ...
    def addlist(self, k, v) -> None: ...
    def get(self, k, default: Incomplete | None = ...): ...
    def getlist(self, k, default=...): ...
    def clear(self) -> None: ...
    def setdefault(self, k, default=...): ...
    def copy(self): ...
    @classmethod
    def fromkeys(cls, keys, default: Incomplete | None = ...): ...
    def update(self, E, **F) -> None: ...
    def update_extend(self, E, **F) -> None: ...
    def __setitem__(self, k, v) -> None: ...
    def __getitem__(self, k): ...
    def __delitem__(self, k) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def pop(self, k, default=...): ...
    def popall(self, k, default=...): ...
    def poplast(self, k=..., default=...): ...
    def iteritems(self, multi: bool = ...) -> Generator[Incomplete, None, None]: ...
    def iterkeys(self, multi: bool = ...) -> Generator[Incomplete, None, None]: ...
    def itervalues(self, multi: bool = ...) -> Generator[Incomplete, None, None]: ...
    def todict(self, multi: bool = ...): ...
    def sorted(self, key: Incomplete | None = ..., reverse: bool = ...): ...
    def sortedvalues(self, key: Incomplete | None = ..., reverse: bool = ...): ...
    def inverted(self): ...
    def counts(self): ...
    def keys(self, multi: bool = ...): ...
    def values(self, multi: bool = ...): ...
    def items(self, multi: bool = ...): ...
    def __iter__(self): ...
    def __reversed__(self) -> Generator[Incomplete, None, None]: ...
    def viewkeys(self): ...
    def viewvalues(self): ...
    def viewitems(self): ...
OMD = OrderedMultiDict
MultiDict = OrderedMultiDict

class FastIterOrderedMultiDict(OrderedMultiDict):
    def iteritems(self, multi: bool = ...) -> Generator[Incomplete, None, None]: ...
    def iterkeys(self, multi: bool = ...) -> Generator[Incomplete, None, None]: ...
    def __reversed__(self) -> Generator[Incomplete, None, None]: ...

class OneToOne(dict):
    inv: Incomplete
    def __init__(self, *a, **kw) -> None: ...
    @classmethod
    def unique(cls, *a, **kw): ...
    def __setitem__(self, key, val) -> None: ...
    def __delitem__(self, key) -> None: ...
    def clear(self) -> None: ...
    def copy(self): ...
    def pop(self, key, default=...): ...
    def popitem(self): ...
    def setdefault(self, key, default: Incomplete | None = ...): ...
    def update(self, dict_or_iterable, **kw) -> None: ...

class ManyToMany:
    data: Incomplete
    inv: Incomplete
    def __init__(self, items: Incomplete | None = ...) -> None: ...
    def get(self, key, default=...): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, vals) -> None: ...
    def __delitem__(self, key) -> None: ...
    def update(self, iterable) -> None: ...
    def add(self, key, val) -> None: ...
    def remove(self, key, val) -> None: ...
    def replace(self, key, newkey) -> None: ...
    def iteritems(self) -> Generator[Incomplete, None, None]: ...
    def keys(self): ...
    def __contains__(self, key): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other): ...

def subdict(d, keep: Incomplete | None = ..., drop: Incomplete | None = ...): ...

class FrozenHashError(TypeError): ...

class FrozenDict(dict):
    def updated(self, *a, **kw): ...
    @classmethod
    def fromkeys(cls, keys, value: Incomplete | None = ...): ...
    def __reduce_ex__(self, protocol): ...
    def __hash__(self): ...
    def __copy__(self): ...
    __ior__: Incomplete
    __setitem__: Incomplete
    __delitem__: Incomplete
    update: Incomplete
    setdefault: Incomplete
    pop: Incomplete
    popitem: Incomplete
    clear: Incomplete
